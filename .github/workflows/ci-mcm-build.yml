name: ci - mcm-build

on:
  workflow_call:
    inputs:
      mcm_build_matrix:
        description: "Json matrix for mcm build"
        required: true
        type: string
      gnu_mirror_url:
        description: "URL for GNU mirror"
        required: true
        type: string

jobs:
  mcm-build:
    name: ${{ matrix.triple_prefix }}-${{ matrix.arch_type }}
    runs-on: ${{ matrix.build_host }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.mcm_build_matrix) }}
    env:
      matrix_arch_type: ${{ matrix.arch_type }}
      matrix_arch_config: ${{ matrix.arch_config }}
      matrix_triple_prefix: ${{ matrix.triple_prefix }}
      container_name: "cross_builder"

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false

      - name: Host - Bootstrap docker container
        uses: userdocs/actions/qbt_docker@e8f57bd585c7bb6dcce011694d6772bab657abca # v1.0.7
        with:
            os_id: "alpine"
            os_version_id: "edge"
            additional_apps: >
              autoconf automake bash bison build-base curl
              findutils flex git libarchive-tools libtool
              linux-headers patch perl pkgconf rsync
              tar texinfo xz zip zlib-dev zlib-static
            custom_docker_commands: |
              -e GNU_MIRROR_URL=${{ inputs.gnu_mirror_url }}

      - name: Host - Set ${{ matrix.arch_type }} musl to ${{ matrix.arch_config }}
        run: sed "s|GCC_CONFIG_FOR_TARGET +=|GCC_CONFIG_FOR_TARGET += ${matrix_arch_config}|" -i config.mak

      - name: Host - Show updated config.mak
        run: |
          for mak in *.mak; do
            {
              printf '\n%s\n\n' "# $mak"
              printf '%s\n' '```'
              while IFS= read -r line; do
                if [[ $line =~ ^-include[[:space:]](.*)$ ]]; then
                  [[ -f "${BASH_REMATCH[1]}" ]] && cat "${BASH_REMATCH[1]}"
                else
                  printf '%s\n' "$line"
                fi
              done < "$mak"
              printf '%s\n' '```'
            } | tee -a "$GITHUB_STEP_SUMMARY"
          done

      - name: Host - Cache sources (restore)
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ github.workspace }}/sources
          key: mcm-sources-${{ hashFiles('versions.mak') }}

      - name: Host - Github cache files - update timestamps
        run: find ${{ github.workspace }}/sources/ -type f -exec touch -a -m {} +

      - name: Docker - scripts +x
        run: docker exec ${container_name} chmod +x cowpatch.sh builder-helper.bash

      - name: Docker - install ${{ matrix.arch_type }} toolchain
        run: >
          docker exec "${container_name}"
          make -j"$(nproc)" install TARGET="${matrix_arch_type}" OUTPUT="${wd}/build/${matrix_arch_type}"

      - name: Host - archive ${{ matrix.arch_type }} toolchain
        run: |
          cd "$(pwd)/build"
          XZ_OPT=-9T0 tar -cvJf ${matrix_triple_prefix}-${matrix_arch_type}.tar.xz ${matrix_arch_type}/

      - name: Host - Generate artifact attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: "build/${{ matrix.triple_prefix }}-${{ matrix.arch_type }}.tar.xz"

      - name: Host - Docker - upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ matrix.triple_prefix }}-${{ matrix.arch_type }}-toolchain"
          path: "build/${{ matrix.triple_prefix }}-${{ matrix.arch_type }}.tar.xz"
