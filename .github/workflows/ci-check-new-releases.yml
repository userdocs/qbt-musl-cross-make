name: ci - check-new-release

on:
  workflow_call:
    inputs:
      bypass_check:
        type: string
        default: "false"
    outputs:
      build_new_release:
        value: ${{ jobs.check_release.outputs.build_new_release }}

jobs:
  check_release:
    outputs:
      build_new_release: ${{ steps.boot_strap_release.outputs.build_new_release }}
    runs-on: ubuntu-24.04-arm
    env:
      GH_TOKEN: "${{ github.token}}"
      build_new_release: "false"
      bypass_check: ${{ inputs.bypass_check }}

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install dependencies
        run: sudo apt-get install -y ssed

      - name: boot strap
        id: boot_strap_release
        run: |
          until curl -sLf "https://github.com/userdocs/qbt-musl-cross-make/releases/latest/download/versions.json" > remote_versions.json; do
            echo "waiting for URL."
            sleep 2
          done

          declare -A current_versions
          eval "$(jq -r 'to_entries[]|@sh"current_versions[\(.key)]=\(.value)"' remote_versions.json)"

          if curl -sLIo /dev/null --fail "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD"; then
              config_sub="$(git ls-remote "https://git.savannah.gnu.org/git/config.git" | head -n1 | awk '{ print substr($1,1,8) }')"
              printf '%s\n' "savannah.gnu.org is reachable, using git to get config.sub commit hash"
          else
              config_sub="$(jq -r .CONFIG_SUB_REV versions.json)"
              printf '%s\n' "savannah.gnu.org is not reachable, using jq to get config.sub commit hash of current version"
          fi

          # mirror_url="https://mirrors.dotsrc.org/gnu"
          mirror_url="https://ftp.snt.utwente.nl/pub/software/gnu/"

          declare -A remote_versions
          remote_versions[CONFIG_SUB_REV]="$(git ls-remote "https://git.savannah.gnu.org/git/config.git" | head -n1 | awk '{ print substr($1,1,8) }')"
          remote_versions[GCC_VER]="$(curl -sL "${gnu_mirror_url}/gcc/" | ssed -Rn 's|(.*)href="gcc-(.+?)/"(.*)|\2|p' | sort -V | tail -n1)"
          remote_versions[BINUTILS_VER]="$(curl -sL "${gnu_mirror_url}/binutils/" | ssed -Rn 's|(.*)href="binutils-(.+?)\.tar\.xz"(.*)|\2|p' | tail -n1)"
          remote_versions[MUSL_VER]=git-"$(git ls-remote "https://git.musl-libc.org/git/musl" | head -n1 | awk '{ print substr($1,1,8) }')"
          remote_versions[GMP_VER]="$(curl -sL "${gnu_mirror_url}/gmp/" | ssed -Rn 's|(.*)href="gmp-(.+?)\.tar\.xz"(.*)|\2|p' | tail -n1)"
          remote_versions[MPC_VER]="$(curl -sL "${gnu_mirror_url}/mpc/" | ssed -Rn 's|(.*)href="mpc-(.+?)\.tar\.gz"(.*)|\2|p' | tail -n1)"
          remote_versions[MPFR_VER]="$(curl -sL "${gnu_mirror_url}/mpfr/" | ssed -Rn 's|(.*)href="mpfr-(.+?)\.tar\.gz"(.*)|\2|p' | tail -n1)"
          remote_versions[LINUX_VER]="$(curl -sL "https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/" | ssed -Rn 's|(.*)href="linux-(.+?)\.tar\.gz"(.*)|\2|p' | sort -rV | head -n1)"
          remote_versions[ISL_VER]="$(curl -sL https://libisl.sourceforge.io | ssed -Rn 's|(.*)href="isl-(.+?)\.tar\.xz"(.*)|\2|p' | tail -n1)"

          # Verify the array entries and exit on failure
          for key in "${!remote_versions[@]}"; do
            if [[ -z "${remote_versions[$key]}" ]]; then
              echo "Error: ${key} is empty"
              exit 1
            fi
          done

          declare -A remote_urls_dl
          remote_urls_dl[CONFIG_SUB_REV]="https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=${remote_versions[CONFIG_SUB_REV]}"
          remote_urls_dl[GCC_VER]="${gnu_mirror_url}/gcc/gcc-${remote_versions[GCC_VER]}/gcc-${remote_versions[GCC_VER]}.tar.xz"
          remote_urls_dl[BINUTILS_VER]="${gnu_mirror_url}/binutils/binutils-${remote_versions[BINUTILS_VER]}.tar.xz"
          remote_urls_dl[MUSL_VER]=""
          remote_urls_dl[GMP_VER]="${gnu_mirror_url}/gmp/gmp-${remote_versions[GMP_VER]}.tar.xz"
          remote_urls_dl[MPC_VER]="${gnu_mirror_url}/mpc/mpc-${remote_versions[MPC_VER]}.tar.gz"
          remote_urls_dl[MPFR_VER]="${gnu_mirror_url}/mpfr/mpfr-${remote_versions[MPFR_VER]}.tar.xz"
          remote_urls_dl[LINUX_VER]="https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/linux-${remote_versions[LINUX_VER]}.tar.xz"
          remote_urls_dl[ISL_VER]="https://libisl.sourceforge.io/isl-${remote_versions[ISL_VER]}.tar.xz"

          ver() {
            local test_array
            read -ra test_array < <(printf "%s" "${@//./ }")
            printf "%d%03d%03d%03d" "${test_array[@]}"
          }

          for iray in "${!current_versions[@]}"; do
            if [[ ! "$iray" =~ ^(CONFIG_SUB_REV|MUSL_VER)$ ]]; then
              if [[ "$(ver "${current_versions[$iray]}")" -lt "$(ver "${remote_versions[$iray]}")" ]]; then
                printf "%-14s current:%-10s remote:%-10s %s\n" "$iray" "${current_versions[$iray]}" "${remote_versions[$iray]}" "< New version available - workflow will be triggered"
                curl -sL "${remote_urls_dl[$iray]}" -o "${remote_urls_dl[$iray]##*/}"
                sha1sum "${remote_urls_dl[$iray]##*/}" > "hashes/${remote_urls_dl[$iray]##*/}.sha1"
                rm -f "${remote_urls_dl[$iray]##*/}"
                printf '%s\n' "build_new_release=true" >> $GITHUB_OUTPUT
              else
                printf "%-14s current:%-10s remote:%-10s\n" "$iray" "${current_versions[$iray]}" "${remote_versions[$iray]}"
              fi
            fi

            if [[ "$iray" =~ ^(CONFIG_SUB_REV|MUSL_VER)$ ]]; then
              if [[ "${current_versions[$iray]}" != "${remote_versions[$iray]}" ]]; then
                printf "%-14s current:%-10s remote:%-10s %s\n" "$iray" "${current_versions[$iray]}" "${remote_versions[$iray]}" "< New version available - workflow will be triggered"

                if [[ "$iray" != "MUSL_VER" ]]; then
                  printf '%s' "$(curl -sL "${remote_urls_dl[$iray]}" | sha1sum | sed 's/-/config.sub/')" > "hashes/config.sub.${remote_versions[CONFIG_SUB_REV]}.sha1"
                fi
                printf '%s\n' "build_new_release=true" >> $GITHUB_OUTPUT
              else
                printf "%-14s current:%-10s remote:%-10s\n" "$iray" "${current_versions[$iray]}" "${remote_versions[$iray]}"
              fi
            fi
          done

          cat > "versions.json" <<- VERSIONS_JSON
          {
            "CONFIG_SUB_REV": "${remote_versions[CONFIG_SUB_REV]}",
            "GCC_VER": "${remote_versions[GCC_VER]}",
            "BINUTILS_VER": "${remote_versions[BINUTILS_VER]}",
            "MUSL_VER": "${remote_versions[MUSL_VER]}",
            "GMP_VER": "${remote_versions[GMP_VER]}",
            "MPC_VER": "${remote_versions[MPC_VER]}",
            "MPFR_VER": "${remote_versions[MPFR_VER]}",
            "LINUX_VER": "${remote_versions[LINUX_VER]}",
            "ISL_VER": "${remote_versions[ISL_VER]}"
          }
          VERSIONS_JSON

          cat > "versions.mak" <<- VERSIONS_MAK
          CONFIG_SUB_REV = ${remote_versions[CONFIG_SUB_REV]}
          GCC_VER = ${remote_versions[GCC_VER]}
          BINUTILS_VER = ${remote_versions[BINUTILS_VER]}
          MUSL_VER = ${remote_versions[MUSL_VER]}
          GMP_VER = ${remote_versions[GMP_VER]}
          MPC_VER = ${remote_versions[MPC_VER]}
          MPFR_VER = ${remote_versions[MPFR_VER]}
          LINUX_VER = ${remote_versions[LINUX_VER]}
          ISL_VER = ${remote_versions[ISL_VER]}
          VERSIONS_MAK

          if [[ ${bypass_check} == 'true' ]] ; then
            printf '%s\n' "build_new_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push
        if: ${{ steps.boot_strap_release.outputs.build_new_release == 'true' }}
        run: |
          # Only run git commands if there are actual changes
          if [[ -f "versions.json" ]] && [[ -f "versions.mak" ]] && [[ -d "hashes" ]]; then
            git add versions.json versions.mak hashes/*.sha1 || true
            git status --porcelain | grep -q . && {
            git -c user.name='github-actions[bot]' -c user.email='github-actions[bot]@users.noreply.github.com' commit -m "Automated commit by GitHub Actions"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
            } || echo "No changes detected"
          fi
