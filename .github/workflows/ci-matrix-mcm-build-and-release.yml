name: ci-matrix-mcm-build-and-release

on:
  workflow_dispatch:
    inputs:
      docker_only:
        description: "Docker job only"
        required: true
        default: false
        type: boolean

jobs:
  bootstrap-matrix:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
    outputs:
      matrix_includes: ${{ steps.triples.outputs.matrix_includes }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: bootstrap the matrix
        id: triples
        run: echo "matrix_includes=$(jq -c . triples.json)" >> $GITHUB_OUTPUT

  build:
    needs: [bootstrap-matrix]
    runs-on: ${{ matrix.build_host }}
    permissions:
      id-token: write
      contents: read
      attestations: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.bootstrap-matrix.outputs.matrix_includes) }}
    env:
      matrix_alpine_prefix: ${{ matrix.alpine_prefix }}
      matrix_arch_type: ${{ matrix.arch_type }}
      matrix_arch_config: ${{ matrix.arch_config }}
      matrix_triple_prefix: ${{ matrix.triple_prefix }}
      matrix_docker_platform: ${{ matrix.docker_platform }}

    name: build ${{ matrix.triple_prefix }}-${{ matrix.arch_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Host - phased updates
        run: printf '%s\n' 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      - name: Host - update
        run: sudo apt-get update

      # - name: Host - upgrade
      #   run: sudo apt-get -y upgrade

      - name: Host - set up qemu-user-static binfmt-support
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Host - Create docker multiarch container
        run: |
          docker run --name mcm -it -d -w /home/github -v ${{ github.workspace }}:/home/github ${matrix_alpine_prefix}/alpine:edge
          docker exec mcm sh -c 'adduser -h /home/github -Ds /bin/bash -u 1001 github && apk add sudo'
          docker exec mcm sh -c 'printf "%s" "github ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/github'

      - name: Docker - apk update
        run: docker exec mcm apk update

      - name: Docker - apk install bash
        run: docker exec mcm apk add -u --no-cache autoconf automake bash bison build-base curl findutils flex git libarchive-tools libtool linux-headers patch perl pkgconf rsync tar texinfo xz zip

      - name: Host - Set ${{ matrix.arch_type }} musl to ${{ matrix.arch_config }}
        run: sed "s|GCC_CONFIG_FOR_TARGET +=|GCC_CONFIG_FOR_TARGET += ${matrix_arch_config}|" -i config.mak

      - name: Host - Disable binutils gold for loongarch64
        if: matrix.arch_type == 'loongarch64-linux-musl'
        run: sed "s| --enable-gold||" -i config.mak

      - name: Host -  Show updated config.mak
        run: cat config.mak

      - name: Docker - install ${{ matrix.arch_type }} toolchain
        run: docker exec -u github:github mcm make -j"$(nproc)" install TARGET="${matrix_arch_type}" OUTPUT="/home/github/build/${matrix_arch_type}"

      - name: Host - archive ${{ matrix.arch_type }} toolchain
        run: |
          cd "$(pwd)/build"
          XZ_OPT=-9T0 tar -cvJf ${matrix_triple_prefix}-${matrix_arch_type}.tar.xz ${matrix_arch_type}/

      - name: Host - Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "build/${{ matrix.triple_prefix }}-${{ matrix.arch_type }}.tar.xz"

      - name: Host - Docker - upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "qbt-mcm-${{ matrix.triple_prefix }}-${{ matrix.arch_type }}"
          path: "build/${{ matrix.triple_prefix }}-${{ matrix.arch_type }}.tar.xz"

  release:
    name: Upload artifacts to release
    runs-on: ubuntu-24.04-arm
    needs: [build]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Host - Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: qbt-mcm
          pattern: qbt-mcm-*
          merge-multiple: true

      - name: set release info from versions.mak
        run: |
          cp -f versions.mak release_body.md
          jq -R 'split(" = ") | {(.[0]):.[1]}' versions.mak | jq -s 'add' > versions.json

      - name: set tag via date
        run: echo "github_tag=$(date +"%y%V")" >> $GITHUB_ENV

      - name: Create release - tag - assets
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: "qbt-mcm/*.tar.xz,versions.json"
          replacesArtifacts: true
          tag: "${{ env.github_tag }}"
          name: "qbt-musl-cross-make toolchains"
          bodyFile: release_body.md
          allowUpdates: true
